package edu.mum.rainbow.business.batch.daily;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.NonTransientResourceException;
import org.springframework.batch.item.ParseException;
import org.springframework.batch.item.UnexpectedInputException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import edu.mum.rainbow.business.service.ClientService;
import edu.mum.rainbow.business.service.DailyTransactionService;
import edu.mum.rainbow.business.service.TransactionService;
import edu.mum.rainbow.common.model.DailyTransaction;
import edu.mum.rainbow.common.model.Transaction;

@Component
public class DailyTransactionBatchReader implements ItemReader<Transaction> {

	@Autowired
	private DailyTransactionService dailyTransactionService;

	@Autowired
	private TransactionService transactionService;

	@Autowired
	private ClientService clientService;
	
	
	private List<String> clientIds;
	private int currentIndex = 0;
	
	@PostConstruct
	private void init() {
		this.clientIds = clientService.findAllClients();
	}
	
	@Override
	public Transaction read() throws Exception, UnexpectedInputException, ParseException, NonTransientResourceException {
		List<DailyTransaction> fetchDailyTransactions = dailyTransactionService.fetchDailyTransactions();
		for (DailyTransaction dailyTransaction : fetchDailyTransactions) {
			if(!dailyTransaction.getStatus().equals("Archived")){
				Transaction transaction = transactionService.transferDailyToHistoricalTransaction(dailyTransaction);
				dailyTransactionService.archiveDailyTransaction(dailyTransaction);
			}
		}
		return historicalTranList;
	}

}
